/*
 * This file is generated by jOOQ.
 */
package app.cash.backfila.client.misk.jooq.gen.tables


import app.cash.backfila.client.misk.jooq.gen.Jooq
import app.cash.backfila.client.misk.jooq.gen.keys.KEY_BALANCE_IDX_SQUARE_FLOAT_ENTITY
import app.cash.backfila.client.misk.jooq.gen.keys.KEY_BALANCE_PRIMARY
import app.cash.backfila.client.misk.jooq.gen.tables.records.BalanceRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Balance(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BalanceRecord>?,
    aliased: Table<BalanceRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<BalanceRecord>(
    alias,
    Jooq.JOOQ,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>jooq.balance</code>
         */
        val BALANCE = Balance()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BalanceRecord> = BalanceRecord::class.java

    /**
     * The column <code>jooq.balance.id</code>.
     */
    val ID: TableField<BalanceRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>jooq.balance.entity</code>.
     */
    val ENTITY: TableField<BalanceRecord, String?> = createField(DSL.name("entity"), SQLDataType.VARCHAR(191).nullable(false), this, "")

    /**
     * The column <code>jooq.balance.jurisdiction</code>.
     */
    val JURISDICTION: TableField<BalanceRecord, String?> = createField(DSL.name("jurisdiction"), SQLDataType.VARCHAR(3).nullable(false), this, "")

    /**
     * The column <code>jooq.balance.amount_cents</code>.
     */
    val AMOUNT_CENTS: TableField<BalanceRecord, Long?> = createField(DSL.name("amount_cents"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>jooq.balance.currency</code>.
     */
    val CURRENCY: TableField<BalanceRecord, String?> = createField(DSL.name("currency"), SQLDataType.VARCHAR(3).nullable(false), this, "")

    /**
     * The column <code>jooq.balance.version</code>.
     */
    val VERSION: TableField<BalanceRecord, Int?> = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>jooq.balance.created_at</code>.
     */
    val CREATED_AT: TableField<BalanceRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>jooq.balance.updated_at</code>.
     */
    val UPDATED_AT: TableField<BalanceRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<BalanceRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BalanceRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>jooq.balance</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>jooq.balance</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>jooq.balance</code> table reference
     */
    constructor(): this(DSL.name("balance"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, BalanceRecord>): this(Internal.createPathAlias(child, key), child, key, BALANCE, null)
    override fun getSchema(): Schema = Jooq.JOOQ
    override fun getIdentity(): Identity<BalanceRecord, Long?> = super.getIdentity() as Identity<BalanceRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<BalanceRecord> = KEY_BALANCE_PRIMARY
    override fun getKeys(): List<UniqueKey<BalanceRecord>> = listOf(KEY_BALANCE_PRIMARY, KEY_BALANCE_IDX_SQUARE_FLOAT_ENTITY)
    override fun getRecordVersion(): TableField<BalanceRecord, Int?> = VERSION
    override fun `as`(alias: String): Balance = Balance(DSL.name(alias), this)
    override fun `as`(alias: Name): Balance = Balance(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Balance = Balance(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Balance = Balance(name, null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Long?, String?, String?, Long?, String?, Int?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row8<Long?, String?, String?, Long?, String?, Int?, LocalDateTime?, LocalDateTime?>
}
