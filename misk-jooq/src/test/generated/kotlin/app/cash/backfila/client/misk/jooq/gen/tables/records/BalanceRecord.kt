/*
 * This file is generated by jOOQ.
 */
package app.cash.backfila.client.misk.jooq.gen.tables.records


import app.cash.backfila.client.misk.jooq.gen.tables.Balance

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BalanceRecord() : UpdatableRecordImpl<BalanceRecord>(Balance.BALANCE), Record8<Long?, String?, String?, Long?, String?, Int?, LocalDateTime?, LocalDateTime?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var entity: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var jurisdiction: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var amountCents: Long?
        set(value) = set(3, value)
        get() = get(3) as Long?

    var currency: String?
        set(value) = set(4, value)
        get() = get(4) as String?

    var version: Int?
        set(value) = set(5, value)
        get() = get(5) as Int?

    var createdAt: LocalDateTime?
        set(value) = set(6, value)
        get() = get(6) as LocalDateTime?

    var updatedAt: LocalDateTime?
        set(value) = set(7, value)
        get() = get(7) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Long?, String?, String?, Long?, String?, Int?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row8<Long?, String?, String?, Long?, String?, Int?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row8<Long?, String?, String?, Long?, String?, Int?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row8<Long?, String?, String?, Long?, String?, Int?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Long?> = Balance.BALANCE.ID
    override fun field2(): Field<String?> = Balance.BALANCE.ENTITY
    override fun field3(): Field<String?> = Balance.BALANCE.JURISDICTION
    override fun field4(): Field<Long?> = Balance.BALANCE.AMOUNT_CENTS
    override fun field5(): Field<String?> = Balance.BALANCE.CURRENCY
    override fun field6(): Field<Int?> = Balance.BALANCE.VERSION
    override fun field7(): Field<LocalDateTime?> = Balance.BALANCE.CREATED_AT
    override fun field8(): Field<LocalDateTime?> = Balance.BALANCE.UPDATED_AT
    override fun component1(): Long? = id
    override fun component2(): String? = entity
    override fun component3(): String? = jurisdiction
    override fun component4(): Long? = amountCents
    override fun component5(): String? = currency
    override fun component6(): Int? = version
    override fun component7(): LocalDateTime? = createdAt
    override fun component8(): LocalDateTime? = updatedAt
    override fun value1(): Long? = id
    override fun value2(): String? = entity
    override fun value3(): String? = jurisdiction
    override fun value4(): Long? = amountCents
    override fun value5(): String? = currency
    override fun value6(): Int? = version
    override fun value7(): LocalDateTime? = createdAt
    override fun value8(): LocalDateTime? = updatedAt

    override fun value1(value: Long?): BalanceRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): BalanceRecord {
        this.entity = value
        return this
    }

    override fun value3(value: String?): BalanceRecord {
        this.jurisdiction = value
        return this
    }

    override fun value4(value: Long?): BalanceRecord {
        this.amountCents = value
        return this
    }

    override fun value5(value: String?): BalanceRecord {
        this.currency = value
        return this
    }

    override fun value6(value: Int?): BalanceRecord {
        this.version = value
        return this
    }

    override fun value7(value: LocalDateTime?): BalanceRecord {
        this.createdAt = value
        return this
    }

    override fun value8(value: LocalDateTime?): BalanceRecord {
        this.updatedAt = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: Long?, value5: String?, value6: Int?, value7: LocalDateTime?, value8: LocalDateTime?): BalanceRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised BalanceRecord
     */
    constructor(id: Long? = null, entity: String? = null, jurisdiction: String? = null, amountCents: Long? = null, currency: String? = null, version: Int? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.entity = entity
        this.jurisdiction = jurisdiction
        this.amountCents = amountCents
        this.currency = currency
        this.version = version
        this.createdAt = createdAt
        this.updatedAt = updatedAt
    }
}
