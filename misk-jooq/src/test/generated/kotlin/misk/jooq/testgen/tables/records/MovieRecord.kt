/*
 * This file is generated by jOOQ.
 */
package misk.jooq.testgen.tables.records


import java.time.LocalDateTime

import misk.jooq.testgen.tables.Movie

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class MovieRecord() : UpdatableRecordImpl<MovieRecord>(Movie.MOVIE), Record6<Long?, String?, String?, Int?, LocalDateTime?, LocalDateTime?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var name: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var genre: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var version: Int?
        set(value) = set(3, value)
        get() = get(3) as Int?

    var createdAt: LocalDateTime?
        set(value) = set(4, value)
        get() = get(4) as LocalDateTime?

    var updatedAt: LocalDateTime?
        set(value) = set(5, value)
        get() = get(5) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Long?, String?, String?, Int?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row6<Long?, String?, String?, Int?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row6<Long?, String?, String?, Int?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row6<Long?, String?, String?, Int?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Long?> = Movie.MOVIE.ID
    override fun field2(): Field<String?> = Movie.MOVIE.NAME
    override fun field3(): Field<String?> = Movie.MOVIE.GENRE
    override fun field4(): Field<Int?> = Movie.MOVIE.VERSION
    override fun field5(): Field<LocalDateTime?> = Movie.MOVIE.CREATED_AT
    override fun field6(): Field<LocalDateTime?> = Movie.MOVIE.UPDATED_AT
    override fun component1(): Long? = id
    override fun component2(): String? = name
    override fun component3(): String? = genre
    override fun component4(): Int? = version
    override fun component5(): LocalDateTime? = createdAt
    override fun component6(): LocalDateTime? = updatedAt
    override fun value1(): Long? = id
    override fun value2(): String? = name
    override fun value3(): String? = genre
    override fun value4(): Int? = version
    override fun value5(): LocalDateTime? = createdAt
    override fun value6(): LocalDateTime? = updatedAt

    override fun value1(value: Long?): MovieRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): MovieRecord {
        this.name = value
        return this
    }

    override fun value3(value: String?): MovieRecord {
        this.genre = value
        return this
    }

    override fun value4(value: Int?): MovieRecord {
        this.version = value
        return this
    }

    override fun value5(value: LocalDateTime?): MovieRecord {
        this.createdAt = value
        return this
    }

    override fun value6(value: LocalDateTime?): MovieRecord {
        this.updatedAt = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: Int?, value5: LocalDateTime?, value6: LocalDateTime?): MovieRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised MovieRecord
     */
    constructor(id: Long? = null, name: String? = null, genre: String? = null, version: Int? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.name = name
        this.genre = genre
        this.version = version
        this.createdAt = createdAt
        this.updatedAt = updatedAt
    }
}
